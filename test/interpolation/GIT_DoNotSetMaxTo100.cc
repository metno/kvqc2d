
#include "GapInterpolationTestBase.hh"

TEST_F(GapInterpolationTest, DoNotSetMaxTo100)
{
    DataList data(99754, 211, 330);
    data.add("2012-04-16 05:00:00",     -10.9,     -10.9, "0111000000100010", "")
        .add("2012-04-16 06:00:00",     -10.4,     -10.4, "0111000000100010", "")
        .add("2012-04-16 07:00:00",      -7.8,      -7.8, "0111000000100010", "")
        .add("2012-04-16 08:00:00",  -32767.0,  -32767.0, "0000003000000000", "")
        .add("2012-04-16 09:00:00",      -8.0,      -8.0, "0110000000100010", "")
        .add("2012-04-16 10:00:00",      -7.0,      -7.0, "0111000000100010", "")
        .add("2012-04-16 11:00:00",      -7.5,      -7.5, "0111000000100010", "");
    data.setParam(213)
        .add("2012-04-16 05:00:00",     -11.2,     -11.2, "0111000000000000", "")
        .add("2012-04-16 06:00:00",     -10.9,     -10.9, "0111000000000000", "")
        .add("2012-04-16 07:00:00",     -10.4,     -10.4, "0111000000000000", "")
        .add("2012-04-16 08:00:00",  -32767.0,  -32767.0, "0000003000000000", "")
        .add("2012-04-16 09:00:00",      -9.0,      -9.0, "0110000000000000", "")
        .add("2012-04-16 10:00:00",      -8.0,      -8.0, "0111000000000000", "")
        .add("2012-04-16 11:00:00",      -7.7,      -7.7, "0111000000000000", "");
    data.setParam(215)
        .add("2012-04-16 05:00:00",      -9.4,      -9.4, "0111000000000000", "")
        .add("2012-04-16 06:00:00",      -9.1,      -9.1, "0111000000000000", "")
        .add("2012-04-16 07:00:00",      -7.8,      -7.8, "0111000000000000", "")
        .add("2012-04-16 08:00:00",  -32767.0,  -32767.0, "0000003000000000", "")
        .add("2012-04-16 09:00:00",      -6.0,      -6.0, "0110000000000000", "")
        .add("2012-04-16 10:00:00",      -6.9,      -6.9, "0111000000000000", "")
        .add("2012-04-16 11:00:00",      -5.7,      -5.7, "0111000000000000", "");
    ASSERT_NO_THROW(data.insert(db));

    std::stringstream config;
    config << "Start_YYYY = 2012\n"
           << "Start_MM   =   04\n"
           << "Start_DD   =   16\n"
           << "Start_hh   =    0\n"
           << "End_YYYY   = 2012\n"
           << "End_MM     =   04\n"
           << "End_DD     =   17\n"
           << "End_hh     =    0\n"
           << "TypeId     =  330\n"
           << "Parameter = par=211,minPar=213,maxPar=215,minVal=-80,maxVal=100,offsetCorrectionLimit=15,fluctuationLevel=0.5\n";
    AlgorithmConfig params;
    params.Parse(config);

    ASSERT_CONFIGURE(algo, params);
    const int N = 5;
    ASSERT_RUN(algo, bc, N);
    const float expectedC[N] = { -7.9, -9.7, -9, -7.4, -6.0 };
    const float expectedP[N] = { 211, 213, 213, 215, 215 };
    for(int i=0; i<N; ++i) {
        EXPECT_NEAR(expectedC[i], bc->update(i).corrected(), i==0 ? 0.1 : 1) << "i=" << i;
        EXPECT_EQ(expectedP[i], bc->update(i).paramID()) << "i=" << i;
    }
    ASSERT_RUN(algo, bc, 0);
}
