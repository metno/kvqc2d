
#include "GapInterpolationTestBase.hh"

TEST_F(GapInterpolationTest, FluctuationSize2)
{
    DataList data(18700, 211, 330);
    data
        .add("2012-07-28 08:00:00",      15.1,      15.1, "0111000000100010", "")
        .add("2012-07-28 09:00:00",      16.2,      16.2, "0111000000100010", "")
        .add("2012-07-28 10:00:00",      16.4,      16.4, "0111000000100010", "")
        .add("2012-07-28 11:00:00",      16.8,      16.8, "0111000000100010", "")
        .add("2012-07-28 12:00:00",      16.7,      16.7, "0111000000100010", "")
        .add("2012-07-28 13:00:00",      16.6,      16.6, "0111000000100010", "")
        .add("2012-07-28 14:00:00",      16.4,      16.4, "0111000000100010", "")
        .add("2012-07-28 15:00:00",      16.7,      16.7, "0111000000100010", "");
    data.setParam(213);
    data.setStation(18700).setType(330)
        .add("2012-07-28 08:00:00",      14.8,      14.8, "0111000000000000", "")
        .add("2012-07-28 09:00:00",      15.1,      15.1, "0111000000000000", "")
        .add("2012-07-28 10:00:00",      16.2,      16.2, "0111000000000000", "")
        .add("2012-07-28 11:00:00",    -32767,    -32767, "0000003000000000", "") // 16.4
        .add("2012-07-28 12:00:00",    -32767,    -32767, "0000003000000000", "") // 16.7
        .add("2012-07-28 13:00:00",      16.6,      16.6, "0111000000000000", "")
        .add("2012-07-28 14:00:00",      16.4,      16.4, "0111000000000000", "")
        .add("2012-07-28 15:00:00",      16.4,      16.4, "0111000000000000", "");
    data.setParam(215);
    data.setStation(18700).setType(330)
        .add("2012-07-28 08:00:00",      15.1,      15.1, "0111000000000000", "")
        .add("2012-07-28 09:00:00",      16.2,      16.2, "0111000000000000", "")
        .add("2012-07-28 10:00:00",      16.7,      16.7, "0111000000000000", "")
        .add("2012-07-28 11:00:00",    -32767,    -32767, "0000003000000000", "") // 16.8
        .add("2012-07-28 12:00:00",    -32767,    -32767, "0000003000000000", "") // 16.9
        .add("2012-07-28 13:00:00",      16.8,      16.8, "0111000000000000", "")
        .add("2012-07-28 14:00:00",      16.6,      16.6, "0111000000000000", "")
        .add("2012-07-28 15:00:00",      16.7,      16.7, "0111000000000000", "");
    ASSERT_NO_THROW(data.insert(db));

    std::ostringstream sql;
    sql << "INSERT INTO station VALUES(18700, 59.942, 10.720, 94.0, 0.0, 'OSLO - BLINDERN', 1492, 18700, NULL, NULL, NULL, 8, 't', '1937-02-25 00:00:00');";
    ASSERT_NO_THROW(db->exec(sql.str()));

    std::stringstream config;
    config << "Start_YYYY = 2012\n"
           << "Start_MM   =   07\n"
           << "Start_DD   =   28\n"
           << "Start_hh   =   08\n"
           << "End_YYYY   = 2012\n"
           << "End_MM     =   07\n"
           << "End_DD     =   28\n"
           << "End_hh     =   15\n"
           << "TypeId     =  330\n"
           << "Parameter  =  par=211,minPar=213,maxPar=215,offsetCorrectionLimit=15,fluctuationLevel=0.5\n";
    AlgorithmConfig params;
    params.Parse(config);

    ASSERT_CONFIGURE(algo, params);
    ASSERT_RUN(algo, bc, 6);
    EXPECT_NEAR(16.4, bc->update(0).corrected(), 0.15);
    EXPECT_NEAR(16.7, bc->update(1).corrected(), 0.15);
    EXPECT_NEAR(16.4, bc->update(2).corrected(), 0.15);
    EXPECT_NEAR(16.8, bc->update(3).corrected(), 0.15);
    EXPECT_NEAR(16.9, bc->update(4).corrected(), 0.15);
    EXPECT_NEAR(16.8, bc->update(5).corrected(), 0.15);

    ASSERT_RUN(algo, bc, 0);
}
