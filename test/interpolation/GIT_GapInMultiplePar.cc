
#include "GapInterpolationTestBase.hh"

TEST_F(GapInterpolationTest, GapInMultiplePar)
{
    DataList data(18700, 178, 330);
    data.add("2012-03-25 18:00:00",    1030.6, "0100000000000010", "")
        .add("2012-03-25 19:00:00",    1030.7, "0100000000000010", "")
        .add("2012-03-25 20:00:00",    1031.1, "0100000000000010", "")
        .add("2012-03-25 21:00:00",  -32767.0, "0000003000000000", "")
        .add("2012-03-25 22:00:00",  -32767.0, "0000003000000000", "")
        .add("2012-03-25 23:00:00",    1031.4, "0100000000000010", "")
        .add("2012-03-26 00:00:00",    1031.7, "0100000000000010", "")
        .add("2012-03-26 01:00:00",    1031.5, "0100000000000010", "")
        .add("2012-03-26 02:00:00",    1031.4, "0100000000000010", "")
        .add("2012-03-26 03:00:00",    1031.3, "0100000000000010", "");
    data.setParam(211);
    data.setStation(18700).setType(330)
        .add("2012-03-25 18:00:00",      11.5, "0111000000100010", "")
        .add("2012-03-25 19:00:00",      10.1, "0111000000100010", "")
        .add("2012-03-25 20:00:00",       7.4, "0111000000100010", "")
        .add("2012-03-25 21:00:00",  -32767.0, "0000003000000000", "")
        .add("2012-03-25 22:00:00",  -32767.0, "0000003000000000", "")
        .add("2012-03-25 23:00:00",       4.4, "0110000000100010", "")
        .add("2012-03-26 00:00:00",  -32767.0, "0000003000000000", "")
        .add("2012-03-26 01:00:00",       4.4, "0111000000100010", "")
        .add("2012-03-26 02:00:00",       4.4, "0111000000100010", "")
        .add("2012-03-26 03:00:00",       4.4, "0111000000100010", "");

    const int neighborStations[] = { 4200, 17150, 20301, -1 };
    const int neighborTypeIds[] = { 342, 342, 330, -1 };
    for(int i=0; neighborStations[i]>0; ++i) {
        data.setParam(178);
        data.setStation(neighborStations[i]).setType(neighborTypeIds[i])
            .add("2012-03-25 18:00:00", 1031.1, "0100000000000010", "")
            .add("2012-03-25 19:00:00", 1031.6, "0100000000000010", "")
            .add("2012-03-25 20:00:00", 1031.6, "0100000000000010", "")
            .add("2012-03-25 21:00:00", 1031.4, "0100000000000010", "")
            .add("2012-03-25 22:00:00", 1031.4, "0100000000000010", "")
            .add("2012-03-25 23:00:00", 1031.6, "0100000000000010", "")
            .add("2012-03-26 00:00:00", 1032.0, "0100000000000010", "")
            .add("2012-03-26 01:00:00", 1031.9, "0100000000000010", "")
            .add("2012-03-26 02:00:00", 1031.8, "0100000000000010", "")
            .add("2012-03-26 03:00:00", 1031.7, "0100000000000010", "");
        data.setParam(211)
            .add("2012-03-25 18:00:00",   10.4, "0111000000100010", "")
            .add("2012-03-25 19:00:00",    9.1, "0111000000100010", "")
            .add("2012-03-25 20:00:00",    8.6, "0111000000100010", "")
            .add("2012-03-25 21:00:00",    4.1, "0111000000100010", "")
            .add("2012-03-25 22:00:00",    2.9, "0111000000100010", "")
            .add("2012-03-25 23:00:00",    2.6, "0111000000100010", "")
            .add("2012-03-26 00:00:00",    1.6, "0111000000100010", "")
            .add("2012-03-26 01:00:00",    2.6, "0111000000100010", "")
            .add("2012-03-26 02:00:00",    2.6, "0111000000100010", "")
            .add("2012-03-26 03:00:00",    2.6, "0111000000100010", "");
    }
    ASSERT_NO_THROW(data.insert(db));

    std::stringstream config;
    config << "Start_YYYY = 2012\n"
           << "Start_MM   =   03\n"
           << "Start_DD   =   25\n"
           << "Start_hh   =   18\n"
           << "End_YYYY   = 2012\n"
           << "End_MM     =   03\n"
           << "End_DD     =   26\n"
           << "End_hh     =   03\n"
           << "TypeId     =  330\n"
           << "Parameter  =  par=211,minPar=213,maxPar=215,offsetCorrectionLimit=15,fluctuationLevel=0.5\n"
           << "Parameter  =  par=178,minVal=800,maxVal=1200,offsetCorrectionLimit=5\n";
    AlgorithmConfig params;
    params.Parse(config);

    ASSERT_CONFIGURE(algo, params);
    ASSERT_RUN(algo, bc, 5);

    int u=0;
    EXPECT_NEAR(3.9, bc->update(u).corrected(), 0.01); u+=1;
    EXPECT_NEAR(3.7, bc->update(u).corrected(), 0.01); u+=1;
    EXPECT_NEAR(3.4, bc->update(u).corrected(), 0.01); u+=1;

    EXPECT_NEAR(1031.0, bc->update(u).corrected(), 0.01); u+=1;
    EXPECT_NEAR(1031.1, bc->update(u).corrected(), 0.01); u+=1;

    ASSERT_RUN(algo, bc, 0);
}
