ProcessImpl::
ProcessUnitT( ReadProgramOptions params )
{
  while (ProcessTime >= stime) 
  {
             try {
                result = dbGate.select(Qc2Data, kvQueries::selectMissingData(params.missing,pid,ProcessTime));
              }
              if(!Qc2Data.empty()) {
                   for (std::list<kvalobs::kvData>::const_iterator id = Qc2Data.begin(); id != Qc2Data.end(); ++id) {
                          result = dbGate.select(Qc2SeriesData, kvQueries::selectData(id->stationID(),pid,XTime,YTime));
                             if (Tseries.size()==3) {
                                   if (Tseries[0].original() > params.missing && Tseries[1].original()==params.missing && 
                                       Tseries[2].original() > params.missing){
                                       if (MaxT.size()==1 && MinT.size()==1){
                                       }
                                   }
                             }
                   }
              }
                                     //result = dbGate.select(Qc2InterpData, kvQueries::selectData(StationIds,pid,Tseries[kkk].obstime(),
                                     //Qc2D GSW(Qc2InterpData,StationList,params);
                                     //GSW.Qc2_interp(); 
                Tseries.clear();
  ProcessTime.addHour(-1);
  }
return 0;
}

